/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API.
 * You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package server

import (
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc paramHandler
}

type paramHandler func(c *CallParams, w http.ResponseWriter, r *http.Request)

var (
	routes = []Route{
		{
			"Index",
			"GET",
			"/v1/",
			Index,
		},
		{
			"AddSecret",
			"POST",
			"/v1/secret",
			AddSecret,
		},
		{
			"GetSecretByHash",
			"GET",
			"/v1/secret/{hash}",
			GetSecretByHash,
		},
	}

	// counter counts incoming requests
	counter = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "secretserver_requests_total",
			Help: "A counter for requests to the wrapped handler.",
		},
		[]string{"code", "method"},
	)

	// duration is partitioned by the HTTP method and handler. It uses custom
	// buckets based on the expected request duration.
	duration = prometheus.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "secretserver_request_duration_seconds",
			Help:    "A histogram of latencies for requests.",
			Buckets: []float64{.25, .5, 1, 2.5, 5, 10},
		},
		[]string{"handler", "method"},
	)

	// reqDurations is a summary to track fictional latencies for three
	// distinct services with different latency distributions.
	reqDurations = prometheus.NewSummaryVec(
		prometheus.SummaryOpts{
			Name:       "secretserver_request_response_seconds",
			Help:       "Request latency distributions.",
			Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
		},
		[]string{"handler", "method"},
	)
)

func init() {
	prometheus.MustRegister(counter)
	prometheus.MustRegister(duration)
	prometheus.MustRegister(reqDurations)
}

func NewRouter(callParams *CallParams) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)

	for _, route := range routes {
		handler := Logger(callParams, route.HandlerFunc, route.Name)

		handler = promhttp.InstrumentHandlerDuration(
			reqDurations.MustCurryWith(prometheus.Labels{
				"handler": strings.ToLower(route.Name),
			}), handler)
		handler = promhttp.InstrumentHandlerDuration(
			duration.MustCurryWith(prometheus.Labels{
				"handler": strings.ToLower(route.Name),
			}), handler)
		handler = promhttp.InstrumentHandlerCounter(counter, handler)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	// Register Prometheus endpoint
	router.Name("Metrics").
		Path("/metrics").
		Handler(promhttp.Handler()).
		Methods("GET")

	return router
}

func Logger(c *CallParams, inner paramHandler, name string) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		inner(c, w, r)

		c.Infof(
			"%s %s %s %s",
			r.Method,
			r.RequestURI,
			name,
			time.Since(start),
		)
	})
}
